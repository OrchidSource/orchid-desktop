// Variables
//
// Contains general variables

@mixin _assert-ascending($map, $map-name) {
  $prev-key: null;
  $prev-num: null;
  @each $key, $num in $map {
    @if $prev-num == null {
      // Do nothing
    } @else if not comparable($prev-num, $num) {
      @warn "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    } @else if $prev-num >= $num {
      @warn "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    }
    $prev-key: $key;
    $prev-num: $num;
  }
}

// Replace `$search` with `$replace` in `$string`
// @author Hugo Giraudel
// @param {String} $string - Initial string
// @param {String} $search - Substring to replace
// @param {String} $replace ('') - New value
// @return {String} - Updated string
@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

@mixin _assert-starts-at-zero($map) {
  $values: map-values($map);
  $first-value: nth($values, 1);
  @if $first-value != 0 {
    @warn "First breakpoint in `$grid-breakpoints` must start at 0, but starts at #{$first-value}.";
  }
}

$orchid-gutter-width: 30px;


// General variable structure
//
// Variable format should follow the `$component-modifier-state-property` order.


// Colors
//
// Grayscale and brand colors for use across Bootstrap.

// Start with assigning color names to specific hex values.
$white:  #fff !default;
$black:  #000 !default;
$red:    #d9534f !default;
$orange: #f5a623 !default;
$yellow: #ffd500 !default;
$green:  #5cb85c !default;
$blue:   #18BECC !default;
$blue-light:  #79E2F5 !default;
$teal:   #5bc0de !default;
$pink:   #E068C4 !default;
$purple: #613d7c !default;

// Create grayscale
$gray-dark:                 #212121 !default;
$gray:                      #757575 !default;
$gray-light:                #9e9e9e !default;
$gray-lighter:              #e0e0e0 !default;
$gray-lightest:             #f5f5f5 !default;

// gray color used for some of UI elements
// todo: factor out
$gray-default: $gray-lighter;

/// The orchid colors

// color that goes behind cards
$content-background: #f5f6fa;

// navbar colors
$navbar-background: #332058;
$navbar-foreground: #AE9DCC;

$navbar-connected: #faeb4c;
$navbar-connected-hover: #fff47d;
$navbar-connected-active: #d9cc41;

// not needed? todo: factor out
$navbar-disconnected: $gray-light;
$navbar-disconnected-hover: $gray-lighter;
$navbar-disconnected-active: $gray;

// Reassign color vars to semantic color scheme

$brand-primary:             #462b78 !default;
// hover color for brand-primary colored buttons
$brand-primary-hover:       #643EAB !default;
// click color for brand-primary colored buttons
$brand-primary-clicked: #37225E !default;

$brand-secondary: #00B3B4 !default;
$brand-secondary-hover: #00CCCC !default;
$brand-secondary-clicked: #008080 !default;


$brand-primary-light:       green !default;
// $brand-primary-light:       #f8f4fc !default;
$brand-success:             $green !default;
$brand-info:                $teal !default;
$brand-warning:             $orange !default;
$brand-danger:              $red !default;

// remove?
$headers: 'Roboto', sans serif;
$dark-bg-color: #616161;
$primary-text-color: #3F414C;
$secondary-text-color: #99A1B0;
$light-grey-bg: #99A1B0;
$white-text: #fff;
$darkest-grey: #3F414C;

$dashboard-card-header-background: #e1e2e6;

// FONTS
